/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.23
 * Generated at: 2016-04-05 15:29:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apps.base.mdm.role;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.unieap.UnieapConstants;
import com.unieap.pojo.User;
import com.unieap.base.SYSConfig;

public final class role_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/unieap/unieap.jsp", Long.valueOf(1450633063746L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.unieap.UnieapConstants");
    _jspx_imports_classes.add("com.unieap.base.SYSConfig");
    _jspx_imports_classes.add("com.unieap.pojo.User");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\r\n");
      out.write("\r\n");
      out.write("\r\n");

	
    String path = request.getContextPath();
    String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
	        + path + "/";
    User user = UnieapConstants.getUser();
    Object error = request.getSession().getAttribute("SPRING_SECURITY_CONTEXT");
    String errorDesc = "";	
    if(error!=null){
		errorDesc = error.toString();
		if(errorDesc.contains("Bad credentials")||errorDesc.contains("UserDetailsService")){
			errorDesc = UnieapConstants.getMessage("user.login.error.usercode");
		}
	}
    

      out.write("\r\n");
      out.write("<!-- 开源框架文件\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(path);
      out.write("/unieap/js/ext-6.0.1/build/ext-all.js\"></script>\r\n");
      out.write("-->\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(path);
      out.write("/unieap/js/ext-4.2.1/ext-all.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(path);
      out.write("/unieap/js/ext-4.2.1/locale/ext-lang-");
      out.print(SYSConfig.defaultLanguage);
      out.write(".js\"></script> \r\n");
      out.write("<!-- extjs框架文件 \r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path);
      out.write("/unieap/js/ext-4.2.1/resources/css/ext-all-neptune.css\" />\r\n");
      out.write("-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path);
      out.write("/unieap/js/ext-4.2.1/resources/css/ext-all-gray.css\" />\r\n");
      out.write("<!-- unieap框架文件 -->\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(path);
      out.write("/unieap/js/common/unieap.util.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path);
      out.write("/unieap/js/common/css/common.css\" />\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"");
      out.print(path);
      out.write("/unieap/js/common/images/title.png\" media=\"screen\" /> \r\n");
      out.write("<!-- 快码缓存文件,由系统生成-->\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(path);
      out.write("/sharefolder/common/");
      out.print(user.getUserCode());
      out.write("_button_constants.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(path);
      out.write("/sharefolder/common/");
      out.print(user.getUserCode());
      out.write("_dicdata_constants.js\"></script>\r\n");
      out.write("<!-- 根目录路径 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar basePathUrl = \"");
      out.print(basePath);
      out.write("\";\r\n");
      out.write("\tvar errorDesc = \"");
      out.print(errorDesc);
      out.write("\";\r\n");
      out.write("\tvar responseText = \"\";\r\n");
      out.write("\tExt.onReady(function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(errorDesc.indexOf(\"This session has been expired\")>-1){\r\n");
      out.write("\t\t\tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'This session has been expired',width:120, height:100,\r\n");
      out.write("\t\t\t\tfn: showResult,buttons: Ext.MessageBox.OK,icon:Ext.MessageBox.WARNING});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tExt.Ajax.on('requestcomplete',function(conn, response, options, eOpts){  \r\n");
      out.write("\t\t\tresponseText = response.responseText;\r\n");
      out.write("\t\t\tif(responseText.indexOf('<script type=\"text/javascript\">')>-1){\r\n");
      out.write("\t\t\t\tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'This session has been expired',width:120, height:100,\r\n");
      out.write("\t\t\t\t\tfn: showTimeOutResult,buttons: Ext.MessageBox.OK,icon:Ext.MessageBox.WARNING});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}else if(responseText.indexOf(\"This session has been expired\")>-1){\r\n");
      out.write("\t\t\t\tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'This session has been expired',width:120, height:100,\r\n");
      out.write("\t\t\t\t\tfn: showResult,buttons: Ext.MessageBox.OK,icon:Ext.MessageBox.WARNING});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("        });\r\n");
      out.write("\t\tfunction showTimeOutResult(){\r\n");
      out.write("\t\t\tdocument.write(responseText); \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction showResult(btn){\r\n");
      out.write("\t\t\t window.top.location.href = \"");
      out.print(path);
      out.write("/timeout.jsp\";  \r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write(" <style type=\"text/css\">\r\n");
      out.write("    .add {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/add.png) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.delete {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/delete.png ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.edit {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/edit.png ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.save {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/save.gif ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.find {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/find.gif ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.search-trigger {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/search-trigger.png ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.clear-trigger {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/clear-trigger.gif ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.view {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/view.gif ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.money-up {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/money_add.png ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.money-down {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/money_delete.png ) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t.folder_go {\r\n");
      out.write("        background-image: url(unieap/js/common/images/folder_go.png) !important;\r\n");
      out.write("    }\r\n");
      out.write("    .menu-show {\r\n");
      out.write("        background-image: url(unieap/js/common/images/menu-show.gif) !important;\r\n");
      out.write("    }\r\n");
      out.write("    .buttons {\r\n");
      out.write("        background-image: url(unieap/js/common/images/buttons.gif) !important;\r\n");
      out.write("    }\r\n");
      out.write("    .leaf {\r\n");
      out.write("        background-image: url(unieap/js/common/images/leaf.png) !important;\r\n");
      out.write("    }\r\n");
      out.write("    .readonly_field{\r\n");
      out.write("\t\tbackground: white repeat-x 0 0;\r\n");
      out.write("\t\tbackground-color:#eaeaea;\r\n");
      out.write("\t}\r\n");
      out.write("\t.refresh {\r\n");
      out.write("\t    background-image: url(unieap/js/common/images/refresh.png) !important;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<!-- unieap用户权限文件 -->\r\n");
      out.write("<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("<meta http-equiv=\"expires\" content=\"0\">\r\n");
      out.write("<meta http-equiv=\"keywords\" content=\"mobile care,mobile service,self-service\">\r\n");
      out.write("<meta http-equiv=\"description\" content=\"unieap system\">\t\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">    \r\n");
      out.write("<meta name=\"format-detection\" content=\"telephone=no\" /> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>User</title>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    Ext.onReady(function(){\r\n");
      out.write("    \tExt.tip.QuickTipManager.init();\r\n");
      out.write("    \t\r\n");
      out.write("    \tExt.define('roleModel', {\r\n");
      out.write("            extend: 'Ext.data.Model',\r\n");
      out.write("            fields:\r\n");
      out.write("            [\r\n");
      out.write("            \t'roleId','roleCode','roleName','createDate','modifyDate','modifyBy','createBy','remark','activeFlag','activeFlagDesc'\r\n");
      out.write("            ],\r\n");
      out.write("            idProperty: 'roleId'\r\n");
      out.write("        });\r\n");
      out.write("    \tvar roleGridStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("            model: 'roleModel',\r\n");
      out.write("            pageSize: ");
      out.print(SYSConfig.getConfig().get("pageSize"));
      out.write(",\r\n");
      out.write("            remoteSort: true,\r\n");
      out.write("            proxy:{ type: 'ajax', url: 'mdmController.do?method=roleGrid',\r\n");
      out.write("                reader: \r\n");
      out.write("                {root: 'rows', totalProperty: 'totalCount'},\r\n");
      out.write("                simpleSortMode: true\r\n");
      out.write("            },\r\n");
      out.write("            sorters: [{ property: 'roleCode', direction: 'ASC'}]\r\n");
      out.write("        });\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar operationItems = [];\r\n");
      out.write("    \tvar selectedRecord;\r\n");
      out.write("    \tif(UnieapButton.Role_Modify!=null&&UnieapButton.Role_Modify.abled==true){\r\n");
      out.write("    \t\toperationItems.push({iconCls :'',tooltip:''});\r\n");
      out.write("\t    \toperationItems.push({\r\n");
      out.write("\t    \t\ticonCls : 'edit',\r\n");
      out.write("\t     \t   \ttooltip: '");
      out.print(UnieapConstants.getMessage("comm.modify"));
      out.write("',\r\n");
      out.write("\t           \thandler:function(grid, rowIndex, colIndex){\t\r\n");
      out.write("\t         \t   \tselectedRecord = grid.getStore().getAt(rowIndex);\r\n");
      out.write("\t        \t\tshowForm('Modify',selectedRecord);\r\n");
      out.write("\t           \t}\r\n");
      out.write("\t        });\r\n");
      out.write("    \t}\r\n");
      out.write("    \tvar selModel = Ext.create('Ext.selection.CheckboxModel',{mode:'single',listeners:{\r\n");
      out.write("\t  \t\t\tselect:function(model,record,index){\r\n");
      out.write("\t  \t\t\t\tvar roleId = record.data.roleId;\r\n");
      out.write("\t  \t\t\t\tif(roleId=='1' || roleId== '2'){\r\n");
      out.write("\t  \t\t\t\t\tExt.getCmp('Role_Dic_Add').disable();\r\n");
      out.write("\t  \t\t\t\t}else{\r\n");
      out.write("\t  \t\t\t\t\tExt.getCmp('Role_Dic_Add').enable();\r\n");
      out.write("\t  \t\t\t\t}\r\n");
      out.write("\t  \t\t\t\tdicTreePanel.getStore().load();\r\n");
      out.write("\t  \t\t\t}\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t});\r\n");
      out.write("    \t\r\n");
      out.write("    \tvar datagrid = Ext.create('Ext.grid.Panel', \r\n");
      out.write("\t        {region: 'center',flex: true,layout: 'fit',columnLines: true,autoScroll:true,autoExpandColumn:'action',\r\n");
      out.write("\t\t   \t \tselModel:selModel,title: '");
      out.print(UnieapConstants.getMessage("mdm.role.title.list"));
      out.write("',\r\n");
      out.write("\t\t \t\tlisteners:{\r\n");
      out.write("\t\t \t\t   \t\tafterRender:function(thisForm, options){\r\n");
      out.write("\t\t\t        \tif(UnieapButton.Role_Add!=null&&UnieapButton.Role_Add.abled== true){\r\n");
      out.write("\t\t\t        \t\tExt.getCmp('Role_Add').show();\r\n");
      out.write("\t\t\t        \t}\r\n");
      out.write("\t\t            }\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t   \t   \t\tstore : roleGridStore,\r\n");
      out.write("\t\t   \t   \tcolumns:\r\n");
      out.write("\t\t   \t   \t[\r\n");
      out.write("\t\t   \t   \t\t{ menuDisabled: true,sortable: false, xtype: 'actioncolumn', text: \"");
      out.print(UnieapConstants.getMessage("comm.operation"));
      out.write("\",width:80,items:operationItems},\r\n");
      out.write("\t\t   \t   \t\t{ text: \"");
      out.print(UnieapConstants.getMessage("mdm.role.display.roleId"));
      out.write("\",dataIndex: 'roleId',width:60},\r\n");
      out.write("\t\t   \t   \t\t{ text: \"");
      out.print(UnieapConstants.getMessage("mdm.role.display.roleCode"));
      out.write("\", dataIndex: 'roleCode',width:120},\r\n");
      out.write("\t\t   \t   \t\t{ text: \"");
      out.print(UnieapConstants.getMessage("mdm.role.display.roleName"));
      out.write("\",flex: true, dataIndex: 'roleName',width:120},\r\n");
      out.write("\t\t   \t   \t\t{ text: \"");
      out.print(UnieapConstants.getMessage("comm.activeFlag"));
      out.write("\",dataIndex: 'activeFlagDesc',sortable: false,width:60}\r\n");
      out.write("\t\t   \t   \t],\r\n");
      out.write("\t \t\t   \ttbar:[{ pressed :true,iconCls:'add',\r\n");
      out.write("\t\t             \t\ttooltip:'");
      out.print(UnieapConstants.getMessage("comm.add"));
      out.write("',text:'");
      out.print(UnieapConstants.getMessage("comm.add"));
      out.write("',xtype:'button',id:'Role_Add',hidden:true,\r\n");
      out.write("\t\t            handler : function(){showForm('Add',null);}\r\n");
      out.write("\t\t    \t}],\r\n");
      out.write("\t    \t   \tbbar:new Ext.PagingToolbar(\r\n");
      out.write("\t    \t   \t{ store : roleGridStore,displayInfo: true})\r\n");
      out.write("\t        });\r\n");
      out.write("    \troleGridStore.loadPage(1);\r\n");
      out.write("    \tvar dataWin = null;\r\n");
      out.write("\t       var dataForm = null;\r\n");
      out.write("\t       var operType = '';\r\n");
      out.write("\t       function showForm(status,selectedRecord){\r\n");
      out.write("\t        \toperType = status;\r\n");
      out.write("\t            if (dataWin==null){\r\n");
      out.write("\t            \tdataForm = Ext.widget('form',\r\n");
      out.write("\t            \t{\r\n");
      out.write("\t                    defaults:{labelAlign: 'left', labelWidth: 90, anchor: '100%'},\r\n");
      out.write("\t                    bodyPadding:5,\r\n");
      out.write("\t                    items:\r\n");
      out.write("\t                    [\r\n");
      out.write("\t                    \t{xtype:'fieldset', title:'");
      out.print(UnieapConstants.getMessage("comm.data"));
      out.write("',\r\n");
      out.write("\t\t                        items:\r\n");
      out.write("\t\t                        [\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',hidden: true, name:'roleId'},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',hidden: true, name:'createDate'},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',hidden: true, name:'modifyDate'},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',hidden: true, name:'createBy'},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',hidden: true, name:'modifyBy'},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',labelWidth:80, width:350, name:'roleCode',fieldLabel:'<font color=red>*</font>");
      out.print(UnieapConstants.getMessage("mdm.role.display.roleCode"));
      out.write("',maxLength:45,allowBlank:false},\r\n");
      out.write("\t\t                        \t{ xtype:'textfield',labelWidth:80, width:350, name:'roleName',fieldLabel:'<font color=red>*</font>");
      out.print(UnieapConstants.getMessage("mdm.role.display.roleName"));
      out.write("',maxLength:128,allowBlank:false},\r\n");
      out.write("\t\t                        \t{ xtype:'combo', labelWidth:80, width:350,forceSelection: true,editable:false,allowBlank:false,\r\n");
      out.write("\t\t                                name:'activeFlag',fieldLabel:'");
      out.print(UnieapConstants.getMessage("comm.activeFlag"));
      out.write("',displayField:'dicName',valueField:'dicCode',value:'Y',\r\n");
      out.write("\t\t                                store:Ext.create('Ext.data.Store', \r\n");
      out.write("\t\t                                { fields : ['dicCode', 'dicName'],data:UnieapDicdata._activeFlag})\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t                        \t{ xtype:'textareafield',labelWidth:80, width:350, name:'remark',fieldLabel:'");
      out.print(UnieapConstants.getMessage("comm.remark"));
      out.write("',maxLength:255,growMin:60,growMax:100,allowBlank:true}\r\n");
      out.write("\t\t                        ]\r\n");
      out.write("\t\t                    }\r\n");
      out.write("\t                    ],\r\n");
      out.write("\t                    buttons: \r\n");
      out.write("\t                    [\r\n");
      out.write("\t\t                    {id:'formCancel', text: '");
      out.print(UnieapConstants.getMessage("comm.cancel"));
      out.write("',\r\n");
      out.write("\t\t                        handler: function(){\r\n");
      out.write("\t\t                        \tdataForm.getForm().reset();\r\n");
      out.write("\t\t                        \tdataWin.hide();\r\n");
      out.write("\t\t                        }\r\n");
      out.write("\t\t                    }, \r\n");
      out.write("\t\t                    {id:'formSubmit',text: '");
      out.print(UnieapConstants.getMessage("comm.submit"));
      out.write("',\r\n");
      out.write("\t\t                        handler: function(){\r\n");
      out.write("\t\t                        \tExt.MessageBox.confirm('");
      out.print(UnieapConstants.getMessage("comm.title.confirm"));
      out.write("', '");
      out.print(UnieapConstants.getMessage("comm.confirm.save"));
      out.write("', saveInfo);\r\n");
      out.write("\t\t                        }\r\n");
      out.write("\t\t                    }\r\n");
      out.write("\t                    ]\r\n");
      out.write("\t                });\r\n");
      out.write("\t                dataWin = Ext.widget('window', \r\n");
      out.write("\t                { title: '");
      out.print(UnieapConstants.getMessage("comm.data"));
      out.write("', closeAction: 'hide', width: 400, height: 260, layout: 'fit', modal: true, items: dataForm,defaultFocus: 'roleName' });\r\n");
      out.write("\t            }\r\n");
      out.write("\t            if(operType=='Add'){\r\n");
      out.write("\t            \tdataForm.getForm().reset();\r\n");
      out.write("\t            \tdataWin.show();\r\n");
      out.write("\t            }else if(operType=='Modify'){\r\n");
      out.write("\t            \tdataWin.show();\r\n");
      out.write("\t            \tdataForm.getForm().setValues(selectedRecord.data);\r\n");
      out.write("\t            }else{\r\n");
      out.write("\t            \tdataWin.show();\r\n");
      out.write("\t            }\r\n");
      out.write("\t    }\r\n");
      out.write("   \t\tfunction removeDatas(btn){\r\n");
      out.write("\t     \tif(btn=='yes'){\r\n");
      out.write("\t\t        \tvar roleId= selectedRecord.get(\"roleId\");\r\n");
      out.write("\t\t        \tExt.Ajax.request({\r\n");
      out.write("\t\t                url: 'mdmController.do?method=roleDeal',\r\n");
      out.write("\t\t                params:{'operType':\"Delete\",\"roleId\":roleId},\r\n");
      out.write("\t\t                success: function(response, opts){\r\n");
      out.write("\t\t                \tvar result = Ext.JSON.decode(action.response.responseText);\r\n");
      out.write("\t\t                \tif(result.isSuccess == 'failed'){\r\n");
      out.write("\t\t                    \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:result.message,\r\n");
      out.write("                         \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR});\r\n");
      out.write("\t\t\t\t                \troleGridStore.reload();\r\n");
      out.write("\t\t                    }else{\r\n");
      out.write("                             \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'");
      out.print(UnieapConstants.getMessage("comm.success.save"));
      out.write("',fn: showResult,\r\n");
      out.write("                            \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.INFO});\r\n");
      out.write("\t\t                    }\r\n");
      out.write("\t\t                },\r\n");
      out.write("\t\t                failure: function(response, opts){\r\n");
      out.write("\t\t                \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:response.responseText,\r\n");
      out.write("\t             \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR});\r\n");
      out.write("\t\t                }\r\n");
      out.write("\t\t             });\r\n");
      out.write("\t     \t}\r\n");
      out.write("\t     }\r\n");
      out.write("\t\t function showResult(btn){\r\n");
      out.write("\t     \tdataWin.hide();\r\n");
      out.write("\t     \troleGridStore.reload();\r\n");
      out.write("\t    }\r\n");
      out.write("\r\n");
      out.write("\t    function saveInfo(btn){\r\n");
      out.write("\t    \tif(btn=='yes'){\r\n");
      out.write("\t    \t\tvar form = dataForm.getForm();\r\n");
      out.write("\t           \t if (form.isValid()){\r\n");
      out.write("\t                    form.submit({\r\n");
      out.write("\t                        clientValidation: true,\r\n");
      out.write("\t                        method: 'POST',\r\n");
      out.write("\t                        params:{'operType':operType},\r\n");
      out.write("\t                        waitMsg: '");
      out.print(UnieapConstants.getMessage("comm.processing"));
      out.write("',\r\n");
      out.write("\t                        url: 'mdmController.do?method=roleDeal',\r\n");
      out.write("\t                        success: function(form, action) {\r\n");
      out.write("\t                       \tvar result = Ext.JSON.decode(action.response.responseText);\r\n");
      out.write("\t\t\t                    if(result.isSuccess == 'failed'){\r\n");
      out.write("\t\t\t                    \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:result.message,\r\n");
      out.write("\t                        \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR});\r\n");
      out.write("\t\t\t                    }else{\r\n");
      out.write("\t                            \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'");
      out.print(UnieapConstants.getMessage("comm.success.save"));
      out.write("',fn: showResult,\r\n");
      out.write("\t                           \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.INFO});\r\n");
      out.write("\t\t\t                    }\r\n");
      out.write("\t                        },\r\n");
      out.write("\t                        failure: function(form, action){\r\n");
      out.write("\t                       \t Ext.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:action.response.responseText,\r\n");
      out.write("\t                    \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR});\r\n");
      out.write("\t                        }\r\n");
      out.write("\t                    });\r\n");
      out.write("\t           \t }\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t}\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t/**tree panle***/\r\n");
      out.write("    \tExt.define('DataTree', {\r\n");
      out.write("            extend: 'Ext.data.Model',\r\n");
      out.write("            idProperty: 'id',\r\n");
      out.write("            fields: [\r\n");
      out.write("\t\t\t\t{name: 'id',     type: 'string'},\r\n");
      out.write("\t\t\t\t{name: 'text',     type: 'string'},\r\n");
      out.write("                {name: 'parentId',  type: 'string'},\r\n");
      out.write("                {name: 'extendAttri'}\r\n");
      out.write("            ]\r\n");
      out.write("        });\r\n");
      out.write("   \t \tvar dicTreestore = Ext.create('Ext.data.TreeStore', {\r\n");
      out.write("            model: 'DataTree',\r\n");
      out.write("            autoLoad : false,\r\n");
      out.write("            proxy: {\r\n");
      out.write("            \ttype: 'ajax',\r\n");
      out.write("            \treader: 'json',\r\n");
      out.write("                url: 'mdmController.do?method=getRoleDicTreeData'\r\n");
      out.write("            },\r\n");
      out.write("            nodeParam : \"id\",\r\n");
      out.write("            root:{  \r\n");
      out.write("                id:1,  \r\n");
      out.write("                text:'Root',  \r\n");
      out.write("                leaf:false,  \r\n");
      out.write("                expanded:false  \r\n");
      out.write("            },\r\n");
      out.write("            folderSort: true\r\n");
      out.write("        });\r\n");
      out.write("   \t \r\n");
      out.write("\t   \tvar dicTreePanel = Ext.create('Ext.tree.Panel', {\r\n");
      out.write("\t   \t\ttitle: '");
      out.print(UnieapConstants.getMessage("mdm.dic.data.title.list"));
      out.write("',\r\n");
      out.write("\t   \t\tregion: 'east',width: 500,layout:'fit',\r\n");
      out.write("\t        collapsible: false,\r\n");
      out.write("\t        useArrows: true,\r\n");
      out.write("\t        rootVisible: true,\r\n");
      out.write("\t        store: dicTreestore,\r\n");
      out.write("\t        //multiSelect: false,\r\n");
      out.write("\t        listeners:{\r\n");
      out.write("\t        \tbeforeload: function (ds, opration, opt){\r\n");
      out.write("\t        \t\tvar rec = datagrid.getSelectionModel().getSelection();\r\n");
      out.write("            \t\tif(rec.length>0){\r\n");
      out.write("\t\t        \t\topration.params.roleId = rec[0].get('roleId'); \r\n");
      out.write("            \t\t}else{\r\n");
      out.write("            \t\t\topration.params.roleId = -1;\r\n");
      out.write("            \t\t}\r\n");
      out.write("\t        \t},\r\n");
      out.write("\t        \tcheckchange:function (node,checked,eOpts){\r\n");
      out.write("\t        \t\tsetParentChecked(node,checked);\r\n");
      out.write("\t        \t},\r\n");
      out.write("\t        \titemclick:function(view, record, node, index, e, eOpts){\r\n");
      out.write("\t        \t\t//parentnode(node);\r\n");
      out.write("\t        \t}\r\n");
      out.write("\t        },\r\n");
      out.write("\t        tbar:[{ pressed :true,iconCls:'save',\r\n");
      out.write("\t\t\t        tooltip:'");
      out.print(UnieapConstants.getMessage("comm.save"));
      out.write("',text:'");
      out.print(UnieapConstants.getMessage("comm.save"));
      out.write("',xtype:'button',id:'Role_Dic_Add',hidden:false,\r\n");
      out.write("\t\t\t        handler : function(){\r\n");
      out.write("\t\t\t        \tExt.MessageBox.confirm('");
      out.print(UnieapConstants.getMessage("comm.title.confirm"));
      out.write("', '");
      out.print(UnieapConstants.getMessage("comm.confirm.save"));
      out.write("', saveRoleDic);\r\n");
      out.write("\t\t\t\t    }\r\n");
      out.write("\t\t\t\t}]\r\n");
      out.write("\t   \t})\r\n");
      out.write("    \t\r\n");
      out.write("\t   \tfunction setParentChecked(node,checked){\r\n");
      out.write("\t        node.set({checked:checked});\r\n");
      out.write("\t        var parentNode = node.parentNode;\r\n");
      out.write("\t        if(parentNode !=null&parentNode.data.id!=1){\r\n");
      out.write("\t            var flag = false;\r\n");
      out.write("\t            parentNode.eachChild(function(child) {\r\n");
      out.write("\t                if(child.data.checked == true){\r\n");
      out.write("\t                    flag = true;\r\n");
      out.write("\t                }\r\n");
      out.write("\t            });\r\n");
      out.write("\t            if(checked == false){\r\n");
      out.write("\t                if(!flag){\r\n");
      out.write("\t                    setParentChecked(parentNode,checked);\r\n");
      out.write("\t                }\r\n");
      out.write("\t            }else{\r\n");
      out.write("\t                if(flag){\r\n");
      out.write("\t                    setParentChecked(parentNode,checked);\r\n");
      out.write("\t                }\r\n");
      out.write("\t            }\r\n");
      out.write("\t         }\r\n");
      out.write("\t    }\r\n");
      out.write("\t   \tfunction saveRoleDic(btn){\r\n");
      out.write("\t   \t\tif(btn=='yes'){\r\n");
      out.write("\t\t   \t\tvar rec = datagrid.getSelectionModel().getSelection();\r\n");
      out.write("\t    \t\tif(rec.length>0){\r\n");
      out.write("\t        \t\troleId = rec[0].get('roleId'); \r\n");
      out.write("\t    \t\t}else{\r\n");
      out.write("\t    \t\t\treturn false;\r\n");
      out.write("\t    \t\t}\r\n");
      out.write("\t\t   \t\tvar nodes = dicTreePanel.getChecked();\r\n");
      out.write("\t\t   \t\tvar datas = [];\r\n");
      out.write("\t\t\t\tExt.Array.each(nodes, function(node){\r\n");
      out.write("\t\t\t\t\tif(node.data.extendAttri.dicCode!=null){\r\n");
      out.write("\t\t\t\t\t\tdatas.push(node.data.extendAttri); \r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t                url: 'mdmController.do?method=assignDicResource',\r\n");
      out.write("\t                params:{'roleId':roleId,'datas':Ext.JSON.encode(datas)},\r\n");
      out.write("\t                success: function(response, opts){\r\n");
      out.write("\t                \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:'");
      out.print(UnieapConstants.getMessage("comm.success.save"));
      out.write("',\r\n");
      out.write("\t            \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.INFO});\r\n");
      out.write("\t                },\r\n");
      out.write("\t                failure: function(response, opts){\r\n");
      out.write("\t                \tExt.MessageBox.show({title: '");
      out.print(UnieapConstants.getMessage("comm.status"));
      out.write("',msg:response.responseText,\r\n");
      out.write("\t                \t\t\tbuttons: Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR});\r\n");
      out.write("\t                }\r\n");
      out.write("\t             });\r\n");
      out.write("\t\t   \t}\r\n");
      out.write("\t   \t}\r\n");
      out.write("    \tvar viewport = Ext.create('Ext.Viewport', {\r\n");
      out.write("    \t\tel : 'datalayou',\r\n");
      out.write("            layout: 'border',\r\n");
      out.write("            items: [datagrid,dicTreePanel]\r\n");
      out.write("        });\r\n");
      out.write("\t});\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"datagrid\"></div>\r\n");
      out.write("    <div id=\"resourceTab\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
